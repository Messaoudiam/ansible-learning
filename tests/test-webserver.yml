---
# Playbook de test pour le r√¥le webserver
# Alternative simple √† Molecule pour l'apprentissage - tests Ansible natifs

- name: "Tests de validation du r√¥le webserver"
  hosts: localhost
  become: true
  gather_facts: true
  
  # Variables pour les tests
  vars:
    test_results: []
    webserver_test_url: "http://localhost"
    expected_response_code: 200
    
  tasks:
    # === PR√âPARATION DES TESTS ===
    
    - name: "üß™ D√©but des tests du r√¥le webserver"
      debug:
        msg: |
          === TESTS DU R√îLE WEBSERVER ===
          Serveur test√©: {{ inventory_hostname }}
          OS: {{ ansible_os_family }} {{ ansible_distribution }}
          URL de test: {{ webserver_test_url }}
          ================================
    
    # === TEST 1: PACKAGE APACHE ===
    
    - name: "Test 1: V√©rifier que le package Apache est install√©"
      package_facts:
        manager: auto
    
    - name: "Test 1: Validation - Package Apache (Debian/Ubuntu)"
      assert:
        that:
          - "'apache2' in ansible_facts.packages"
        fail_msg: "‚ùå √âCHEC: Le package apache2 n'est pas install√©"
        success_msg: "‚úÖ SUCC√àS: Le package apache2 est install√©"
      when: ansible_os_family == "Debian"
      register: test1_debian
    
    - name: "Test 1: Validation - Package Apache (RedHat/CentOS)"
      assert:
        that:
          - "'httpd' in ansible_facts.packages"
        fail_msg: "‚ùå √âCHEC: Le package httpd n'est pas install√©"
        success_msg: "‚úÖ SUCC√àS: Le package httpd est install√©"
      when: ansible_os_family == "RedHat"
      register: test1_redhat
    
    # === TEST 2: SERVICE APACHE ===
    
    - name: "Test 2: V√©rifier l'√©tat du service Apache"
      service_facts:
    
    - name: "Test 2: Validation - Service Apache (Debian/Ubuntu)"
      assert:
        that:
          - "ansible_facts.services['apache2.service'] is defined"
          - "ansible_facts.services['apache2.service'].state == 'running'"
          - "ansible_facts.services['apache2.service'].status == 'enabled'"
        fail_msg: "‚ùå √âCHEC: Le service apache2 n'est pas d√©marr√©/activ√©"
        success_msg: "‚úÖ SUCC√àS: Le service apache2 est d√©marr√© et activ√©"
      when: ansible_os_family == "Debian"
      register: test2_debian
    
    - name: "Test 2: Validation - Service Apache (RedHat/CentOS)"
      assert:
        that:
          - "ansible_facts.services['httpd.service'] is defined"
          - "ansible_facts.services['httpd.service'].state == 'running'"
          - "ansible_facts.services['httpd.service'].status == 'enabled'"
        fail_msg: "‚ùå √âCHEC: Le service httpd n'est pas d√©marr√©/activ√©"
        success_msg: "‚úÖ SUCC√àS: Le service httpd est d√©marr√© et activ√©"
      when: ansible_os_family == "RedHat"
      register: test2_redhat
    
    # === TEST 3: PORT EN √âCOUTE ===
    
    - name: "Test 3: V√©rifier que le port 80 est en √©coute"
      wait_for:
        port: 80
        host: 127.0.0.1
        delay: 1
        timeout: 10
        state: started
      register: test3_port
      
    - name: "Test 3: Validation - Port 80 en √©coute"
      assert:
        that:
          - test3_port is succeeded
        fail_msg: "‚ùå √âCHEC: Le port 80 n'est pas en √©coute"
        success_msg: "‚úÖ SUCC√àS: Le port 80 est en √©coute"
    
    # === TEST 4: FICHIERS WEB ===
    
    - name: "Test 4: V√©rifier l'existence des fichiers web"
      stat:
        path: "{{ item.path }}"
      loop:
        - { path: "/var/www/html", type: "directory" }
        - { path: "/var/www/html/index.html", type: "file" }
        - { path: "/var/www/html/info.html", type: "file" }
      register: test4_files
    
    - name: "Test 4: Validation - Fichiers web"
      assert:
        that:
          - item.stat.exists
          - (item.item.type == "directory" and item.stat.isdir) or (item.item.type == "file" and item.stat.isreg)
        fail_msg: "‚ùå √âCHEC: {{ item.item.path }} manquant ou type incorrect"
        success_msg: "‚úÖ SUCC√àS: {{ item.item.path }} existe"
      loop: "{{ test4_files.results }}"
    
    # === TEST 5: CONTENU HTML ===
    
    - name: "Test 5: V√©rifier le contenu du fichier index.html"
      slurp:
        src: /var/www/html/index.html
      register: index_content
    
    - name: "Test 5: Validation - Contenu HTML"
      assert:
        that:
          - "'<!DOCTYPE html>' in (index_content.content | b64decode)"
          - "'<html' in (index_content.content | b64decode)"
          - "('Apache' in (index_content.content | b64decode)) or ('Serveur Web' in (index_content.content | b64decode))"
        fail_msg: "‚ùå √âCHEC: Le contenu HTML d'index.html n'est pas valide"
        success_msg: "‚úÖ SUCC√àS: Le fichier index.html contient du HTML valide"
    
    # === TEST 6: R√âPONSE HTTP ===
    
    - name: "Test 6: Tester la r√©ponse HTTP du serveur"
      uri:
        url: "{{ webserver_test_url }}"
        method: GET
        status_code: "{{ expected_response_code }}"
        timeout: 10
      register: test6_http
      ignore_errors: true
    
    - name: "Test 6: Validation - R√©ponse HTTP"
      assert:
        that:
          - test6_http.status == expected_response_code
        fail_msg: "‚ùå √âCHEC: Le serveur ne r√©pond pas correctement (code: {{ test6_http.status | default('N/A') }})"
        success_msg: "‚úÖ SUCC√àS: Le serveur r√©pond avec le code {{ expected_response_code }}"
      when: test6_http is defined
    
    # === TEST 7: PAGE INFO ===
    
    - name: "Test 7: Tester la page info.html"
      uri:
        url: "{{ webserver_test_url }}/info.html"
        method: GET
        status_code: 200
        timeout: 10
      register: test7_info
      ignore_errors: true
    
    - name: "Test 7: Validation - Page info.html"
      assert:
        that:
          - test7_info.status == 200
        fail_msg: "‚ùå √âCHEC: La page info.html n'est pas accessible"
        success_msg: "‚úÖ SUCC√àS: La page info.html est accessible"
      when: test7_info is defined
    
    # === TEST 8: S√âCURIT√â BASIQUE ===
    
    - name: "Test 8: V√©rifier les permissions des fichiers web"
      stat:
        path: "{{ item }}"
      loop:
        - "/var/www/html/index.html"
        - "/var/www/html/info.html"
      register: test8_permissions
    
    - name: "Test 8: Validation - Permissions des fichiers"
      assert:
        that:
          - item.stat.mode == "0644"
        fail_msg: "‚ùå √âCHEC: {{ item.item }} n'a pas les bonnes permissions ({{ item.stat.mode }})"
        success_msg: "‚úÖ SUCC√àS: {{ item.item }} a les bonnes permissions (644)"
      loop: "{{ test8_permissions.results }}"
    
    # === R√âSUM√â DES TESTS ===
    
    - name: "üìä R√©sum√© des tests"
      debug:
        msg: |
          
          ========================================
          üìä R√âSUM√â DES TESTS DU R√îLE WEBSERVER
          ========================================
          
          ‚úÖ Test 1: Package Apache install√©
          ‚úÖ Test 2: Service Apache d√©marr√©/activ√©
          ‚úÖ Test 3: Port 80 en √©coute
          ‚úÖ Test 4: Fichiers web pr√©sents
          ‚úÖ Test 5: Contenu HTML valide
          ‚úÖ Test 6: R√©ponse HTTP correcte
          ‚úÖ Test 7: Page info.html accessible
          ‚úÖ Test 8: Permissions correctes
          
          üéâ TOUS LES TESTS ONT R√âUSSI !
          
          Pour tester manuellement:
          ‚Ä¢ curl {{ webserver_test_url }}
          ‚Ä¢ curl {{ webserver_test_url }}/info.html
          ‚Ä¢ Navigateur: {{ webserver_test_url }}
          
          ========================================