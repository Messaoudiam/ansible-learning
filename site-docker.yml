---
# Playbook sp√©cialement adapt√© pour les containers Docker
# Utilise docker exec au lieu de SSH pour simplicit√© p√©dagogique

- name: "Test Ansible sur Containers Docker - Ubuntu"
  hosts: ubuntu-docker
  connection: local
  gather_facts: false
  become: false
  
  vars:
    container_name: "ansible-ubuntu"
    os_type: "ubuntu"
    
  tasks:
    - name: "Collecter les informations syst√®me Ubuntu"
      shell: |
        docker exec {{ container_name }} bash -c "
        echo 'HOSTNAME:' $(hostname)
        echo 'OS:' $(cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"')
        echo 'ARCH:' $(uname -m)
        echo 'PYTHON:' $(python3 --version 2>/dev/null || echo 'Non install√©')
        echo 'MEMORY:' $(cat /proc/meminfo | grep MemTotal | awk '{print $2}') KB
        "
      register: ubuntu_facts
      
    - name: "Afficher les informations Ubuntu"
      debug:
        msg: |
          === INFORMATIONS UBUNTU CONTAINER ===
          {{ ubuntu_facts.stdout }}
    
    - name: "Installer Apache sur Ubuntu"
      shell: |
        docker exec {{ container_name }} bash -c "
        export DEBIAN_FRONTEND=noninteractive &&
        apt update -y &&
        apt install -y apache2 &&
        echo 'Apache install√© sur Ubuntu'
        "
      register: ubuntu_install
      
    - name: "Cr√©er page web Ubuntu"
      shell: |
        docker exec {{ container_name }} bash -c "
        echo '<h1>üêß Serveur Ubuntu configur√© par Ansible</h1>
        <p>Distribution: Ubuntu 22.04</p>
        <p>Serveur Web: Apache2</p>
        <p>Date: $(date)</p>
        <p>Hostname: $(hostname)</p>' > /var/www/html/index.html &&
        echo 'Page web cr√©√©e'
        "
        
    - name: "D√©marrer Apache Ubuntu"
      shell: |
        docker exec {{ container_name }} bash -c "
        service apache2 start &&
        echo 'Apache d√©marr√© sur Ubuntu'
        "

- name: "Test Ansible sur Containers Docker - CentOS/Rocky"
  hosts: centos-docker
  connection: local
  gather_facts: false
  become: false
  
  vars:
    container_name: "ansible-centos"
    os_type: "centos"
    
  tasks:
    - name: "Collecter les informations syst√®me CentOS"
      shell: |
        docker exec {{ container_name }} bash -c "
        echo 'HOSTNAME:' $(hostname)
        echo 'OS:' $(cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"')
        echo 'ARCH:' $(uname -m)
        echo 'PYTHON:' $(python3 --version 2>/dev/null || echo 'Non install√©')
        echo 'MEMORY:' $(cat /proc/meminfo | grep MemTotal | awk '{print $2}') KB
        "
      register: centos_facts
      
    - name: "Afficher les informations CentOS"
      debug:
        msg: |
          === INFORMATIONS CENTOS/ROCKY CONTAINER ===
          {{ centos_facts.stdout }}
    
    - name: "Installer Apache sur CentOS"
      shell: |
        docker exec {{ container_name }} bash -c "
        dnf install -y httpd &&
        echo 'Apache (httpd) install√© sur CentOS'
        "
      register: centos_install
      
    - name: "Cr√©er page web CentOS"
      shell: |
        docker exec {{ container_name }} bash -c "
        echo '<h1>üî¥ Serveur CentOS/Rocky configur√© par Ansible</h1>
        <p>Distribution: Rocky Linux 8</p>
        <p>Serveur Web: Apache httpd</p>
        <p>Date: $(date)</p>
        <p>Hostname: $(hostname)</p>' > /var/www/html/index.html &&
        echo 'Page web cr√©√©e'
        "
        
    - name: "D√©marrer Apache CentOS"
      shell: |
        docker exec {{ container_name }} bash -c "
        /usr/sbin/httpd -D FOREGROUND &
        echo 'Apache (httpd) d√©marr√© sur CentOS'
        "

- name: "Comparaison et Validation Multi-OS"
  hosts: localhost
  connection: local
  gather_facts: false
  
  tasks:
    - name: "V√©rifier les serveurs web"
      shell: |
        echo "=== V√âRIFICATION DES SERVEURS WEB ==="
        echo "Ubuntu Apache:"
        docker exec ansible-ubuntu bash -c "ps aux | grep apache2 | grep -v grep || echo 'Apache2 non d√©marr√©'"
        echo ""
        echo "CentOS httpd:"
        docker exec ansible-centos bash -c "ps aux | grep httpd | grep -v grep || echo 'httpd non d√©marr√©'"
      register: web_status
      
    - name: "Afficher le statut des serveurs"
      debug:
        msg: |
          {{ web_status.stdout }}
          
          === R√âSUM√â ===
          ‚úÖ Deux containers cr√©√©s et configur√©s
          ‚úÖ Ubuntu: Apache2 install√© 
          ‚úÖ CentOS: httpd install√©
          ‚úÖ Pages web personnalis√©es cr√©√©es
          
          === COMMANDES UTILES ===
          Voir les containers: docker ps
          Ubuntu shell: docker exec -it ansible-ubuntu bash
          CentOS shell: docker exec -it ansible-centos bash
          
          === DIFF√âRENCES OBSERV√âES ===
          Ubuntu ‚Üí Package: apache2, Service: apache2
          CentOS ‚Üí Package: httpd, Service: httpd
    
    - name: "Afficher les le√ßons apprises"
      debug:
        msg: |
          üéì LE√áONS ANSIBLE MULTI-OS APPRISES:
          
          1. M√äME PLAYBOOK = R√âSULTATS DIFF√âRENTS
             - Ubuntu utilise 'apache2'
             - CentOS utilise 'httpd'
             - Ansible g√®re ces diff√©rences automatiquement
          
          2. FACTS ANSIBLE ESSENTIELS
             - ansible_os_family d√©tecte 'Debian' vs 'RedHat'
             - Permet l'adaptation automatique du code
          
          3. PORTABILIT√â DU CODE
             - Un playbook peut cibler plusieurs OS
             - Variables conditionnelles s'adaptent
             - Tests sur containers = validation rapide
          
          4. AVANTAGE CONTAINERS POUR APPRENDRE
             - Tests rapides sans vrais serveurs
             - Environnements reproductibles
             - Nettoyage facile: docker rm -f ansible-ubuntu ansible-centos